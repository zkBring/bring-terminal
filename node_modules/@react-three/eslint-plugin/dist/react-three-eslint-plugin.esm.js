// THIS FILE WAS GENERATED DO NOT MODIFY BY HAND
// @command yarn codegen:eslint

var all = {
  plugins: ['@react-three'],
  rules: {
    '@react-three/no-clone-in-loop': 'error',
    '@react-three/no-new-in-loop': 'error'
  }
};

// THIS FILE WAS GENERATED DO NOT MODIFY BY HAND
// @command yarn codegen:eslint

var recommended = {
  plugins: ['@react-three'],
  rules: {
    '@react-three/no-clone-in-loop': 'error',
    '@react-three/no-new-in-loop': 'error'
  }
};

function gitHubUrl(name) {
  return `https://github.com/pmndrs/react-three-fiber/blob/master/packages/eslint-plugin/docs/rules/${name}.md`;
}

const rule$1 = {
  meta: {
    messages: {
      noClone: 'Cloning vectors in the frame loop can cause performance problems. Instead, create once in a useMemo or a single, shared reference outside of the component.'
    },
    docs: {
      url: gitHubUrl('no-clone-in-loop'),
      recommended: true,
      description: 'Disallow cloning vectors in the frame loop which can cause performance problems.'
    }
  },
  create(ctx) {
    return {
      ['CallExpression[callee.name=useFrame] CallExpression MemberExpression Identifier[name=clone]'](node) {
        ctx.report({
          messageId: 'noClone',
          node: node
        });
      }
    };
  }
};
var noCloneInLoop = rule$1;

const rule = {
  meta: {
    messages: {
      noNew: 'Instantiating new objects in the frame loop can cause performance problems. Instead, create once in a useMemo or a single, shared reference outside of the component.'
    },
    docs: {
      url: gitHubUrl('no-new-in-loop'),
      recommended: true,
      description: 'Disallow instantiating new objects in the frame loop which can cause performance problems.'
    }
  },
  create(ctx) {
    return {
      ['CallExpression[callee.name=useFrame] NewExpression'](node) {
        ctx.report({
          messageId: 'noNew',
          node: node
        });
      }
    };
  }
};
var noNewInLoop = rule;

// THIS FILE WAS GENERATED DO NOT MODIFY BY HAND
var index = {
  'no-clone-in-loop': noCloneInLoop,
  'no-new-in-loop': noNewInLoop
};

// THIS FILE WAS GENERATED DO NOT MODIFY BY HAND
const configs = {
  all,
  recommended
};

export { configs, index as rules };
